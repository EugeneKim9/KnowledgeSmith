{"version":3,"sources":["data/constants/index.js","components/Text/index.js","page/LandingPage/index.js","components/CardDeck/index.js","page/GameCardPage/index.js","page/ResultPage/index.js","App.js","index.js"],"names":["green","pink","Text","children","bold","size","color","style","mode","className","textStyle","whiteSpace","overflow","textOverflow","width","height","textAlign","wordWrap","getColor","colors","getStyle","defaultProps","LandingPage","history","useState","language","setLanguage","display","flex","marginBottom","justifyContent","marginTop","onClick","backgroundColor","marginRight","marginLeft","push","CardDeck","GameCardPage","props","useHistory","selectedCategory","setSelectedCategory","selectedPage","setSelectedPage","showMainCategory","setShowMainCategory","showPageCategory","setShowPageCategory","cardIndex","setCardIndex","base_url","filterPage","pages","length","map","item","index","searchPageCategory","title","list","i","j","pageid","console","log","searchPage","categoryQuery","a","categoryPage_url","axios","get","data","query","categorymembers","searchAllCategory","allcategories","key","categoryData","value","min","Math","ceil","max","floor","random","handleOnSwipe","direction","LEFT","pageQuery","pageCategory_url","result","categories","d","slice","useEffect","swipeDirection","RIGHT","handleFinish","pathname","state","onSwipe","undefined","flexDirection","ResultPage","location","useLocation","setResult","React","lan","App","basename","process","exact","path","component","match","params","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fcad625.chunk.js","sourcesContent":["export const defaultWhite = \"#ffffff\";\nexport const defaultBlack = \"#000000\";\n\nexport const green = \"#2e563d\";\nexport const pink = \"#e0b0ce\";\n\n\n\n","import React, { useState } from \"react\";\nimport * as colors from \"../../data/constants\";\nimport \"../../App.css\";\n\nconst Text = ({ children, bold, size, color, style, mode, className }) => {\n  const textStyle = {\n    whiteSpace: \"normal\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"left\",\n    wordWrap: \"break-word\",\n  };\n\n  const getColor = () => {\n    switch (color) {\n      case \"white\":\n        return colors.defaultWhite;\n      case \"black\":\n        return colors.defaultBlack;\n      case \"pink\":\n        return colors.pink;\n      case 'green':\n        return colors.green;\n      default:\n        return color;\n    }\n  };\n\n  const getStyle = () => {\n    switch (mode) {\n      case \"ellipsis\":\n        return {\n          ...textStyle,\n          color: getColor(),\n          ...style,\n        };\n      default:\n        return {\n          color: getColor(),\n          ...style,\n        };\n    }\n  };\n\n  const renderTitle = () => {\n    switch (typeof children) {\n      case \"string\":\n        let title = children.toString().split(\"\\n\");\n        return title.map((v, index) => {\n          return (\n            <div\n              key={index}\n              style={getStyle()}\n              className={`${bold == true && \"fbold\"} fs${size}`}\n            >\n              {v}\n            </div>\n          );\n        });\n      default:\n        return (\n          <div\n            style={getStyle()}\n            className={`${bold == true && \"fbold\"} fs${size}`}\n          >\n            {children}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div\n      style={getStyle()}\n      className={`${className} ${bold == true && \"fbold\"} fs${size}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nText.defaultProps = {\n  bold: false,\n  size: 17,\n  color: \"#000\",\n  style: null,\n  mode: \"normal\",\n};\n\nexport default Text;\n","import React, { useState } from \"react\";\nimport \"../../App.css\";\nimport Text from \"../../components/Text\";\n\nimport * as colors from '../../data/constants';\n\nimport './landing.css';\n\nconst LandingPage = ({history}) => {\n  const [language, setLanguage] = useState('ko');\n\n\n  return (\n    <div style={{display: 'flex', flex: 1}}>\n        <div className=\"background\" style={{marginBottom: 200}}>\n            <Text size={40} bold color={'pink'}>\n                Knowledgesmith\n            </Text>\n            <div style={{display: \"flex\", width: '100%', justifyContent: 'space-between'}} >\n                <Text size={12} color={'pink'}>\n                지식 세공사:\n                </Text>\n                <Text size={12} color={'pink'}>\n                분류의 기술\n                </Text>\n            </div>\n            <div className=\"line\" style={{marginTop: 12}} />\n\n            <div className=\"landing-content\">\n                <Text size={24} bold color={'pink'}>\n                    About\n                </Text>\n\n                <div className=\"landing-text\">\n                    <div className=\"ko\">\n                        <Text size={12} bold color={'pink'}>\n                            분류의 게임을 디자인해보았다. 분류의 제목을 보고 내용을 예상하는 것, \n                            계획적으로 분류에 분류를 더해 정교한 검색 결과를 의도하는 것, \n                            의도 속에서 발생하는 선택과 폐기라는 것이 게임 속에서 반복된다. \n                        </Text>\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>\n                            당신은 분류의 기술로 정보와 지식을 다듬는 세공사가 된다. \n                            지식 세공사로서 당신의 목표는 단 하나의 검색 결과를 표시하는 5개의 분류를 선정하는 것이다. \n                            뻔하디뻔한 위키피디아지만, 연습하다 보면 당신도 지식정보사회 속에서 필요한 어떤 지혜를 얻을 수 있지 않을까? \n                        </Text>\n                    </div>\n\n                    <div className=\"en\">\n                        <Text size={12} bold color={'pink'}>\n                           Here is a classification game. \n                           Expecting from the title of the classification, \n                           intentionally adding classification to the classification and intending a sophisticated result, \n                           and the choices and discards that occur within the intention are repeated in this play.\n                        </Text>\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>\n                            You become a craftsman who refines information and knowledge with the art of classification. \n                           As a knowledgesmith, your goal is to select 5 categories that display only one search result. \n                           It's obvious Wikipedia, but if you practice, you might get a kind-of wisdom you can use in the knowledge and information society?\n                        </Text>\n                    </div>\n                </div>\n                <Text size={24} bold color={'pink'} style={{marginTop: 16}}>\n                    Credit\n                </Text>\n                <div className=\"landing-text\">\n                    <div className=\"role\">\n                        <Text size={12} bold color={'pink'}>기획</Text>\n                        <Text size={12} bold color={'pink'}>Game Design</Text>\n\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>디자인</Text>\n                        <Text size={12} bold color={'pink'}>UI Design</Text>\n\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>개발</Text>\n                        <Text size={12} bold color={'pink'}>Web Dev</Text>\n                    </div>\n\n                    <div className=\"name\">\n                        <Text size={12} bold color={'pink'}>정승기</Text>\n                        <Text size={12} bold color={'pink'}>Seungki</Text>\n\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>이찬우</Text>\n                        <Text size={12} bold color={'pink'}>Chanu</Text>\n\n                        <Text size={12} bold color={'pink'} style={{marginTop: 20}}>김유진</Text>\n                        <Text size={12} bold color={'pink'}>Yoojin</Text>\n                    </div>\n                </div>\n\n            </div>\n\n            \n        </div>\n\n        <div className=\"landing-pc-floating\">\n             <div className=\"landing-floating language\" style={{justifyContent: 'space-between'}}>\n                <div className=\"styled-btn\" \n                onClick={()=>setLanguage('en')}\n                style={{height: 32, backgroundColor: language === 'en' ? colors.pink : colors.green, marginRight: 8}}>\n                <Text size={12} bold color={language === 'en' ? 'green' : 'pink'}>English</Text>\n                </div>\n                <div className=\"styled-btn\"\n                onClick={()=>setLanguage('ko')}\n                style={{height: 32, backgroundColor: language === 'ko' ? colors.pink : colors.green, marginLeft: 8}}>\n                <Text size={12} bold color={language === 'ko' ? 'green' : 'pink'}>한국어</Text>\n                </div>\n            </div>\n\n            <div className=\"landing-floating\">\n                <div className=\"styled-btn\" onClick={() => {history.push(`/game/${language}`)}}>\n                <Text size={24} bold color={'pink'}>Start Crafting</Text>\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n  )\n}\n\nexport default LandingPage;","import React, { useEffect, useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-use-gesture\";\n\nimport SwipeCard from \"../SwipeCard/index.js\";\n\nimport \"./Deck.css\";\n\nimport axios from 'axios';\n\n/* 이거 안씁니다 */\n/* 이거 안씁니다 */\n/* 이거 안씁니다 */\n\nconst to = i => ({\n  x: 0,\n  y: i * 0,\n  scale: 1,\n\n  // 이거 rot 바꾸면 카드들 일정해짐\n  // rot: -10 + Math.random() * 20,\n  rot: 0,\n  delay: i * 50\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(0px) rotateX(0deg) rotateY(${r /\n  10}deg) rotateZ(${r}deg) scale(1)`;\n\nfunction CardDeck({data, language}) {\n  const [selectedCategory, setSelectedCategory] = useState(data)\n  const [selectedPage, setSelectedPage] = useState([]);\n\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(\n    selectedCategory.length, \n    i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      if (!down && trigger) gone.add(index);\n\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === selectedCategory.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n\n\n\n  \n\n  // wiki api 요청하는 기본 url\n  const base_url = `https://${language}.wikipedia.org/w/api.php?`;\n\n\n  // 이전에 선택한 카테고리와 겹치는 페이지만 새로 저장하는 함수\n  const filterPage = (data) => {\n    // 처음엔 비교 안하고 새로 저장함\n    if(selectedPage === null) setSelectedPage(data)\n    else {\n      const list = []\n      for(let i=0; i<data.length; i++){\n        for(let j=0; j<selectedPage.length; j++){\n          if (data[i].pageid === selectedPage[j].pageid) list.push(data[i])\n        }\n      }\n      console.log(list);\n      setSelectedPage(list);\n    }\n  }\n\n\n  // 해당 카테고리의 페이지 정보를 불러오는 함수\n  const searchPage = async (categoryQuery) => {\n      // 그냥 검색 url\n      const searchQuery = '김연아';\n      const search_url = `format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=extracts|pageimages&pithumbsize=400&origin=*&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=${searchQuery}`\n      \n      // const categoryQuery = '그래프 이론'\n      const categoryPage_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmlimit=1000`\n\n      try {\n        const result = await axios.get(`${base_url}${categoryPage_url}`);\n        filterPage(result.data.query.categorymembers)\n        // console.log(result.data.query.categorymembers);\n      } catch (e) {\n        console.log(e)\n      }\n  }\n\n\n  // 위키피디아의 모든 카테고리를 불러오는 함수\n  const searchAllCategory = async () => {\n    /* 중간에 &origin=* 이거 반드시 넣어야 cors 안 막힘 */\n    const category_url = `action=query&format=json&list=allcategories&origin=*&aclimit=1000`\n\n    try {\n    const result = await axios.get(`${base_url}${category_url}`);\n    } catch (e) {\n        console.log(e)\n      }\n\n    // ... 랜덤으로 카테고리 선택하는 로직 필요\n  }\n\n\n  // 해당 카테고리의 하위 카테고리를 불러오는 함수\n  const searchSubCategory = async (categoryQuery) => {\n    const subcategory_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmtype=subcat`\n\n    try {\n    const result = await axios.get(`${base_url}${subcategory_url}`);\n    console.log(result.data.query.categorymembers)\n    setSelectedCategory(result.data.query.categorymembers)\n    } catch (e) {\n        console.log(e)\n      }\n  }\n\n  useEffect(() => {\n    // searchPage('그래프 이론')\n    // searchPage('그래프 알고리즘')\n\n    // 개수의 문제도 아니고 렌더링 순서 문제도 아님. 뭐가 문제일까? \n    searchSubCategory('그래프 이론')\n    console.log(props)\n  }, [])\n\nuseEffect(() => {\n  console.log(props)\n}, [selectedCategory, props])\n\n  return (\n    <>\n    {selectedCategory.length >= 0 &&\n    props.map(({ x, y, rot, scale }, i) => (\n    <SwipeCard\n      key={i}\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      data={selectedCategory}\n      bind={bind}\n    />\n  ))}\n    </>\n  )\n}\n\nexport default CardDeck;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../App.css\";\nimport {Text, CardDeck} from '../../components';\nimport {useHistory } from \"react-router-dom\";\n\nimport * as colors from '../../data/constants';\n\nimport axios from 'axios';\n\nimport cardData from '../../data/cardData';\n\nimport './game.css';\n\nimport { Swipeable, direction } from 'react-deck-swiper';\n\n\nconst GameCardPage = (props) => {\n  const { language } = props;\n  const history = useHistory();\n  const [selectedCategory, setSelectedCategory] = useState([])\n  const [selectedPage, setSelectedPage] = useState([]);\n\n  const [showMainCategory, setShowMainCategory] = useState([]);\n  const [showSubCategory, setShowSubCategory] = useState([])\n  const [showPageCategory, setShowPageCategory] = useState([])\n\n  const [cardIndex, setCardIndex] = useState(0);\n\n  // wiki api 요청하는 기본 url\n  const base_url = `https://${language}.wikipedia.org/w/api.php?`;\n\n\n  // 이전에 선택한 카테고리와 겹치는 페이지만 새로 저장하는 함수\n  const filterPage = (pages) => {\n    \n\n    // 처음엔 비교 안하고 새로 저장함\n    if(selectedCategory.length <= 1 && selectedPage.length === 0) {\n        // console.log('if pages' , pages)\n        setSelectedPage(pages)\n\n        // 속한 페이지들 각각의 카테고리들을 구함\n        pages.map((item, index) => {\n          searchPageCategory(item.title)\n        })\n    }\n    else {\n      // console.log('else pages' , pages)\n      const list = []\n      for(let i=0; i<pages.length; i++){\n        for(let j=0; j<selectedPage.length; j++){\n          // console.log(selectedPage[j].pageid)\n          if (pages[i].pageid === selectedPage[j].pageid) list.push(pages[i])\n        }\n      }\n      console.log('filtered selected page', list);\n      setSelectedPage(list);\n\n      // 속한 페이지들 각각의 카테고리들을 구함\n      list.map((item, index) => {\n          searchPageCategory(item.title);\n        })\n    }\n  }\n\n\n  // 해당 카테고리의 페이지 정보를 불러오는 함수\n  const searchPage = async (categoryQuery) => {\n\n      const categoryPage_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmlimit=1000`\n\n      // console.log('categoryQuery', categoryQuery)\n      try {\n        // 두번째엔 이거 데이터가 안 옴 -> \"분류 :\" 글자 때문\n        const { data } = await axios.get(`${base_url}${categoryPage_url}`);\n        let pages = data.query.categorymembers\n        filterPage(pages)\n        // console.log('search page result', pages);\n      } catch (e) {\n        console.log(e)\n      }\n  }\n\n\n  // 위키피디아의 모든 카테고리를 불러오는 함수\n  const searchAllCategory = async () => {\n    /* 중간에 &origin=* 이거 반드시 넣어야 cors 안 막힘 */\n\n    // 200페이지 정도면 괜찮다\n    // 500개까지만 옴\n    const category_url = `action=query&format=json&list=allcategories&origin=*&acmin=500&aclimit=500`\n\n    try {\n    const { data } = await axios.get(`${base_url}${category_url}`);\n    let list = data.query.allcategories\n\n    // 객체 형태로 옴\n    // console.log('list :', list)\n    for (let i=0; i < list.length; i ++) {\n        let categoryData = showMainCategory;\n        for(let key in list[i]){\n            let value = list[i][key];\n            categoryData.push(value);\n            // 문자열 리스트로 바꿔서 저장\n            setShowMainCategory(categoryData)\n        }\n        var min = Math.ceil(0);\n        var max = Math.floor(30);\n        var random = Math.floor(Math.random() * (max-min)) + min;\n        i += random;\n    }\n    // console.log('showMainCategory : ', showMainCategory)\n\n    // 첫 카드가 안 나와서 강제로 하나 넘김\n    handleOnSwipe(direction.LEFT);\n    } catch (e) {\n        console.log(e)\n      }\n\n    // ... 랜덤으로 카테고리 선택하는 로직 필요\n  }\n\n\n  // 해당 카테고리의 하위 카테고리를 불러오는 함수\n  const searchSubCategory = async (categoryQuery) => {\n    const subcategory_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmtype=subcat`\n\n    try {\n    const result = await axios.get(`${base_url}${subcategory_url}`);\n    console.log('subCategory', result.data.query.categorymembers)\n\n    // subcategory 없는 경우도 있음!!!\n    setShowSubCategory(result.data.query.categorymembers)\n    } catch (e) {\n        console.log(e)\n      }\n  }\n\n  // 해당 페이지의 카테고리를 불러오는 함수\n  const searchPageCategory = async (pageQuery) => {\n    const pageCategory_url = `action=query&format=json&origin=*&titles=${pageQuery}&prop=categories`\n\n    try {\n    const result = await axios.get(`${base_url}${pageCategory_url}`);\n    const data = result.data.query.pages\n    let item = []\n    // console.log('pageCategory data: ', data)\n    \n    for(let key in data){\n            item = data[key].categories\n            // console.log('pageCategory: title', item)\n    }\n    let list = showPageCategory\n\n    item.map((d, index) => {\n      // 카테고리 앞에 \"분류 :\" 라는 글자가 붙으면 페이지 검색이 안됨!!!! \n      // 한국어일 경우만 적용됨\n      if (d.title[2] === ':') list.push(d.title.slice(3))\n      else list.push(d.title)\n    })\n\n    // console.log('list: ', list)\n    setShowPageCategory(list)\n    setShowMainCategory(list)\n    } catch (e) {\n        console.log(e)\n      }\n  }\n\n  useEffect(() => {\n    // 마운트시 카테고리 불러옴\n    searchAllCategory();\n  }, [])\n\n  \n\n  const handleOnSwipe = (swipeDirection) => {\n    if (swipeDirection === direction.RIGHT) {\n      // handle right swipe\n      let list = selectedCategory\n      // 이거 나중엔 showMainCategory 통째로 바꿔버리는데 인덱스가 잘 작동할까????\n      const item = showMainCategory[cardIndex]\n\n      // main 이 아니라 sub일 땐 어쩌지? 변수 써야하나?\n      list.push(item)\n      // searchSubCategory(showMainCategory[cardIndex])\n      \n      searchPage(item)\n\n      setSelectedCategory(list)\n      \n      console.log('selected category: ', list)\n      // console.log('flip')\n    }\n\n    if (swipeDirection === direction.LEFT) {\n      // handle left swipe\n      console.log('pass')\n    }\n\n    // let list = selectedCategory\n    // list.pop()\n    // console.log(list);\n    // setSelectedCategory(list);\n\n    let index = cardIndex + 1;\n    setCardIndex(index);\n  }\n\n  const handleFinish = () => {\n    history.push({pathname: '/result', state: {result: selectedPage, language: language}})\n  }\n\n  useEffect(() => {\n    // 5개 고르면 자동 종료\n    if (selectedCategory.length === 5) handleFinish()\n  }, [selectedCategory, handleFinish])\n\n  useEffect(() => {\n    // result가 0이면 자동 종료\n    if (selectedCategory >= 2 && selectedPage.length === 0) handleFinish()\n  }, [selectedPage, handleFinish])\n  \n\n  return (\n    <div style={{display: 'flex', flex: 1, justifyContent: 'center'}}>\n        <div className=\"background\" style={{marginBottom: 200}}>\n\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                <Text size={40} bold color={'pink'}>\n                    Knowledgesmith\n                </Text>\n            </div> \n            <div className=\"line\" style={{marginTop: 7}} />\n\n              <div className=\"styled-btn\"\n                  onClick={()=>{handleFinish()}}\n                  style={{backgroundColor: colors.green, marginTop: 16}}>\n                      <Text size={24} bold color={'pink'}>종료</Text>\n              </div>\n\n            <div className=\"swipe\">\n              <div className=\"card-back\">\n                  <Swipeable onSwipe={handleOnSwipe}>\n                      <div className=\"card\">\n                        <div className=\"card-content\">\n                          <Text size={32} color=\"green\">\n                            {showMainCategory[cardIndex] !== undefined && \n                            showMainCategory[cardIndex]\n                            }\n                          </Text>\n                        </div>\n                      </div>\n                  </Swipeable>\n                </div>\n            </div>\n\n             <div className=\"game-result\">\n               <div className=\"result-column\">\n                 <Text size={12} color={'pink'}>\n                    cards so far\n                 </Text>\n                 <Text size={24} color={'pink'}>\n                    {selectedCategory.length}/5\n                 </Text>\n               </div>\n\n                <div style={{width: 1, height: 43, backgroundColor: colors.pink}} />\n                \n                <div className=\"result-column\">\n                 <Text size={12} color={'pink'}>\n                    results now\n                 </Text>\n                 <Text size={24} color={'pink'}>\n                    {selectedPage.length}\n                 </Text>\n               </div>\n            </div>\n\n            <div style={{display: 'flex', width: '100%', marginTop: 24, flexDirection: 'column'}}>\n                {selectedCategory.map((item, index) => {\n                    return(\n                        <div className=\"category-box\">\n                            <Text size={16} bold color={'pink'}>\n                                {item}\n                            </Text>\n                        </div>\n                    )\n                })}\n            </div>\n            \n        </div>\n\n          <div className=\"game-pc-floating\">\n            <div className=\"game-floating\" style={{justifyContent: 'space-between'}}>\n                <div className=\"styled-btn\"\n                onClick={()=>{handleOnSwipe(direction.LEFT)}}\n                style={{backgroundColor: colors.green, marginRight: 8}}>\n                    <Text size={24} bold color={'pink'}>Pass</Text>\n                </div>\n                <div className=\"styled-btn\"\n                onClick={()=>{handleOnSwipe(direction.RIGHT)}}\n                style={{backgroundColor: colors.pink, marginLeft: 8}}>\n                    <Text size={24} bold color={'green'}>Flip</Text>\n                </div>\n            </div>\n          </div>\n\n    </div>\n    );\n};\n\nexport default GameCardPage;\n","import React, { useState } from \"react\";\nimport \"../../App.css\";\nimport Text from \"../../components/Text\";\nimport { useLocation } from \"react-router-dom\";\n\nimport * as colors from '../../data/constants';\n\nimport './result.css';\n\nconst ResultPage = ({history}) => {\n  const location = useLocation();\n  const [result, setResult] = useState([]);\n  const [language, setLanguage] = useState([]);\n\n  React.useEffect(() => {\n      if (location.state !== undefined){\n        let data = location.state.result;\n        let lan = location.state.language;\n        console.log('result', data);\n        console.log('lan', lan);\n        setResult(data);\n        setLanguage(lan);\n      }\n       \n    }, [location]);\n\n\n  return (\n    <div style={{display: 'flex', flex: 1}}>\n        <div className=\"background\" style={{marginBottom: 200}}>\n            <Text size={40} bold color={'pink'}>\n                Knowledgesmith\n            </Text>\n            <div className=\"line\" style={{marginTop: 12}} />\n\n            <div className=\"result-card-back\">\n                <div className=\"result-card\">\n                    <div className=\"result-card-content\">\n                        <Text size={32} color=\"green\">\n                            {result.length} Results\n                        </Text>\n                    </div>\n                 </div>\n            </div>\n            \n\n            <div style={{display: 'flex', width: '100%', marginTop: 24, flexDirection: 'column'}}>\n                {result.map((item, index) => {\n                    return(\n                        <div className=\"result-category-box\">\n                            <Text size={16} bold color={'pink'}>\n                                {item.title}\n                            </Text>\n                        </div>\n                    )\n                })}\n             </div>\n            \n        </div>\n\n        <div className=\"result-pc-floating\">\n            <div className=\"result-floating up\">\n                <div className=\"styled-btn\" \n                style={{height: 32}}\n                onClick={() => {}}>\n                <Text size={12} bold color={'pink'}>더보기</Text>\n                </div>\n            </div>\n\n             <div className=\"result-floating\" style={{justifyContent: 'space-between'}}>\n                <div className=\"styled-btn\" \n                onClick={()=>{history.push('/')}}\n                style={{backgroundColor: colors.green, marginRight: 8}}>\n                <Text size={24} bold color={'pink'}>Home</Text>\n                </div>\n                <div className=\"styled-btn\"\n                onClick={()=>{history.push(`game/${language}`)}}\n                style={{backgroundColor: colors.pink, marginLeft: 8}}>\n                <Text size={24} bold color={'green'}>Start Crafting</Text>\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n  )\n}\n\nexport default ResultPage;","import './App.css';\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { LandingPage, GameCardPage, ResultPage } from './page';\nimport React from 'react';\n\nimport './App.css';\n\nfunction App({history}) {\n  return (\n    <div className=\"App\">\n      <div className=\"frame\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path='/' component={LandingPage} />\n          {/* <Route exact path='/tutorial' component={TutorialCardPage} /> */}\n          <Route exact path='/game/:language' \n            component={({ match }) => (\n              <GameCardPage history={history} language={match.params.language} />\n            )} />\n          <Route exact path='/result' component={ResultPage} />\n        </Switch>\n      </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}