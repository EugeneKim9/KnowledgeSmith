{"version":3,"sources":["data/constants/index.js","components/Text/index.js","page/LandingPage/index.js","components/CardDeck/index.js","page/GameCardPage/index.js","App.js","index.js"],"names":["pink","Text","children","bold","size","color","style","mode","className","textStyle","whiteSpace","overflow","textOverflow","width","height","textAlign","wordWrap","getColor","colors","getStyle","defaultProps","LandingPage","history","useState","language","setLanguage","display","flex","justifyContent","bottom","onClick","backgroundColor","push","CardDeck","GameCardPage","props","selectedCategory","setSelectedCategory","cardIndex","setCardIndex","base_url","searchAllCategory","a","axios","get","result","console","log","data","query","searchSubCategory","categoryQuery","subcategory_url","categorymembers","useEffect","onSwipe","swipeDirection","direction","RIGHT","LEFT","undefined","title","App","exact","path","component","match","params","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.259b4cfc.chunk.js","sourcesContent":["export const defaultWhite = \"#ffffff\";\nexport const defaultBlack = \"#000000\";\n\nexport const green = \"#2e563d\";\nexport const pink = \"#e0b0ce\";\n\n\n\n","import React, { useState } from \"react\";\nimport * as colors from \"../../data/constants\";\nimport \"../../App.css\";\n\nconst Text = ({ children, bold, size, color, style, mode, className }) => {\n  const textStyle = {\n    whiteSpace: \"normal\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"left\",\n    wordWrap: \"break-word\",\n  };\n\n  const getColor = () => {\n    switch (color) {\n      case \"white\":\n        return colors.defaultWhite;\n      case \"black\":\n        return colors.defaultBlack;\n      case \"pink\":\n        return colors.pink;\n      case 'green':\n        return colors.green;\n      default:\n        return color;\n    }\n  };\n\n  const getStyle = () => {\n    switch (mode) {\n      case \"ellipsis\":\n        return {\n          ...textStyle,\n          color: getColor(),\n          ...style,\n        };\n      default:\n        return {\n          color: getColor(),\n          ...style,\n        };\n    }\n  };\n\n  const renderTitle = () => {\n    switch (typeof children) {\n      case \"string\":\n        let title = children.toString().split(\"\\n\");\n        return title.map((v, index) => {\n          return (\n            <div\n              key={index}\n              style={getStyle()}\n              className={`${bold == true && \"fbold\"} fs${size}`}\n            >\n              {v}\n            </div>\n          );\n        });\n      default:\n        return (\n          <div\n            style={getStyle()}\n            className={`${bold == true && \"fbold\"} fs${size}`}\n          >\n            {children}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div\n      style={getStyle()}\n      className={`${className} ${bold == true && \"fbold\"} fs${size}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nText.defaultProps = {\n  bold: false,\n  size: 17,\n  color: \"#000\",\n  style: null,\n  mode: \"normal\",\n};\n\nexport default Text;\n","import React, { useState } from \"react\";\nimport \"../../App.css\";\nimport Text from \"../../components/Text\";\n\nimport * as colors from '../../data/constants';\n\nimport './landing.css';\n\nconst LandingPage = ({history}) => {\n  const [language, setLanguage] = useState('ko');\n\n\n  return (\n    <div style={{display: 'flex', flex: 1}}>\n        <div className=\"background\">\n            <Text size={40} bold color={'pink'}>\n                Knowledgesmith\n            </Text>\n            <div style={{display: \"flex\", justifyContent: 'space-between'}} >\n                <Text size={12} color={'pink'}>\n                지식 세공사:\n                </Text>\n                <Text size={12} color={'pink'}>\n                분류의 기술\n                </Text>\n            </div>\n\n            <div className=\"floating\" style={{bottom: 84, justifyContent: 'space-between'}}>\n                <div className=\"styled-btn\"\n                onClick={()=>setLanguage('ko')}\n                style={{height: 32, backgroundColor: language === 'ko' ? colors.pink : colors.green}}>\n                <Text size={12} bold color={language === 'ko' ? 'green' : 'pink'}>한국어</Text>\n                </div>\n                <div className=\"styled-btn\" \n                onClick={()=>setLanguage('en')}\n                style={{height: 32, backgroundColor: language === 'en' ? colors.pink : colors.green}}>\n                <Text size={12} bold color={language === 'en' ? 'green' : 'pink'}>English</Text>\n                </div>\n            </div>\n\n            <div className=\"floating\">\n                <div className=\"styled-btn\" onClick={() => {history.push(`/game/${language}`)}}>\n                <Text size={24} bold color={'pink'}>Start Crafting</Text>\n                </div>\n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default LandingPage;","import React, { useEffect, useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-use-gesture\";\n\nimport SwipeCard from \"../SwipeCard/index.js\";\n\nimport \"./Deck.css\";\n\nimport axios from 'axios';\n\nconst to = i => ({\n  x: 0,\n  y: i * 0,\n  scale: 1,\n\n  // 이거 rot 바꾸면 카드들 일정해짐\n  // rot: -10 + Math.random() * 20,\n  rot: 0,\n  delay: i * 50\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(0px) rotateX(0deg) rotateY(${r /\n  10}deg) rotateZ(${r}deg) scale(1)`;\n\nfunction CardDeck({data, language}) {\n  const [selectedCategory, setSelectedCategory] = useState(data)\n  const [selectedPage, setSelectedPage] = useState([]);\n\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(\n    selectedCategory.length, \n    i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      if (!down && trigger) gone.add(index);\n\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === selectedCategory.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n\n\n\n  \n\n  // wiki api 요청하는 기본 url\n  const base_url = `https://${language}.wikipedia.org/w/api.php?`;\n\n\n  // 이전에 선택한 카테고리와 겹치는 페이지만 새로 저장하는 함수\n  const filterPage = (data) => {\n    // 처음엔 비교 안하고 새로 저장함\n    if(selectedPage === null) setSelectedPage(data)\n    else {\n      const list = []\n      for(let i=0; i<data.length; i++){\n        for(let j=0; j<selectedPage.length; j++){\n          if (data[i].pageid === selectedPage[j].pageid) list.push(data[i])\n        }\n      }\n      console.log(list);\n      setSelectedPage(list);\n    }\n  }\n\n\n  // 해당 카테고리의 페이지 정보를 불러오는 함수\n  const searchPage = async (categoryQuery) => {\n      // 그냥 검색 url\n      const searchQuery = '김연아';\n      const search_url = `format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=extracts|pageimages&pithumbsize=400&origin=*&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=${searchQuery}`\n      \n      // const categoryQuery = '그래프 이론'\n      const categoryPage_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmlimit=1000`\n\n      try {\n        const result = await axios.get(`${base_url}${categoryPage_url}`);\n        filterPage(result.data.query.categorymembers)\n        // console.log(result.data.query.categorymembers);\n      } catch (e) {\n        console.log(e)\n      }\n  }\n\n\n  // 위키피디아의 모든 카테고리를 불러오는 함수\n  const searchAllCategory = async () => {\n    /* 중간에 &origin=* 이거 반드시 넣어야 cors 안 막힘 */\n    const category_url = `action=query&format=json&list=allcategories&origin=*&aclimit=1000`\n\n    try {\n    const result = await axios.get(`${base_url}${category_url}`);\n    } catch (e) {\n        console.log(e)\n      }\n\n    // ... 랜덤으로 카테고리 선택하는 로직 필요\n  }\n\n\n  // 해당 카테고리의 하위 카테고리를 불러오는 함수\n  const searchSubCategory = async (categoryQuery) => {\n    const subcategory_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmtype=subcat`\n\n    try {\n    const result = await axios.get(`${base_url}${subcategory_url}`);\n    console.log(result.data.query.categorymembers)\n    setSelectedCategory(result.data.query.categorymembers)\n    } catch (e) {\n        console.log(e)\n      }\n  }\n\n  useEffect(() => {\n    // searchPage('그래프 이론')\n    // searchPage('그래프 알고리즘')\n\n    // 개수의 문제도 아니고 렌더링 순서 문제도 아님. 뭐가 문제일까? \n    searchSubCategory('그래프 이론')\n    console.log(props)\n  }, [])\n\nuseEffect(() => {\n  console.log(props)\n}, [selectedCategory, props])\n\n  return (\n    <>\n    {selectedCategory.length >= 0 &&\n    props.map(({ x, y, rot, scale }, i) => (\n    <SwipeCard\n      key={i}\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      data={selectedCategory}\n      bind={bind}\n    />\n  ))}\n    </>\n  )\n}\n\nexport default CardDeck;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../App.css\";\nimport {Text, CardDeck} from '../../components';\n\nimport * as colors from '../../data/constants';\n\nimport axios from 'axios';\n\nimport cardData from '../../data/cardData';\n\nimport './game.css';\n\nimport { Swipeable, direction } from 'react-deck-swiper';\n\n\nconst GameCardPage = (props) => {\n  const {language, history} = props;\n  const [selectedCategory, setSelectedCategory] = useState([])\n  const [selectedPage, setSelectedPage] = useState([]);\n\n  const [cardIndex, setCardIndex] = useState(0);\n\n  // wiki api 요청하는 기본 url\n  const base_url = `https://${language}.wikipedia.org/w/api.php?`;\n\n\n  // 이전에 선택한 카테고리와 겹치는 페이지만 새로 저장하는 함수\n  const filterPage = (data) => {\n    // 처음엔 비교 안하고 새로 저장함\n    if(selectedPage === null) setSelectedPage(data)\n    else {\n      const list = []\n      for(let i=0; i<data.length; i++){\n        for(let j=0; j<selectedPage.length; j++){\n          if (data[i].pageid === selectedPage[j].pageid) list.push(data[i])\n        }\n      }\n      console.log(list);\n      setSelectedPage(list);\n    }\n  }\n\n\n  // 해당 카테고리의 페이지 정보를 불러오는 함수\n  const searchPage = async (categoryQuery) => {\n      // 그냥 검색 url\n      const searchQuery = '김연아';\n      const search_url = `format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=extracts|pageimages&pithumbsize=400&origin=*&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=${searchQuery}`\n      \n      // const categoryQuery = '그래프 이론'\n      const categoryPage_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmlimit=1000`\n\n      try {\n        const result = await axios.get(`${base_url}${categoryPage_url}`);\n        filterPage(result.data.query.categorymembers)\n        // console.log(result.data.query.categorymembers);\n      } catch (e) {\n        console.log(e)\n      }\n  }\n\n\n  // 위키피디아의 모든 카테고리를 불러오는 함수\n  const searchAllCategory = async () => {\n    /* 중간에 &origin=* 이거 반드시 넣어야 cors 안 막힘 */\n    const category_url = `action=query&format=json&list=allcategories&origin=*&acmin=200&aclimit=1000`\n\n    try {\n    const result = await axios.get(`${base_url}${category_url}`);\n    console.log(result.data.query)\n    } catch (e) {\n        console.log(e)\n      }\n\n    // ... 랜덤으로 카테고리 선택하는 로직 필요\n  }\n\n\n  // 해당 카테고리의 하위 카테고리를 불러오는 함수\n  const searchSubCategory = async (categoryQuery) => {\n    const subcategory_url = `action=query&format=json&list=categorymembers&origin=*&cmtitle=Category:${categoryQuery}&cmtype=subcat`\n\n    try {\n    const result = await axios.get(`${base_url}${subcategory_url}`);\n    console.log(result.data.query.categorymembers)\n    setSelectedCategory(result.data.query.categorymembers)\n    } catch (e) {\n        console.log(e)\n      }\n  }\n\n  useEffect(() => {\n    // searchPage('그래프 이론')\n    // searchPage('그래프 알고리즘')\n\n    // 개수의 문제도 아니고 렌더링 순서 문제도 아님. 뭐가 문제일까? \n    searchSubCategory('사람')\n    searchAllCategory();\n  }, [])\n\n  \n\n  const handleOnSwipe = (swipeDirection) => {\n    if (swipeDirection === direction.RIGHT) {\n      // handle right swipe\n      console.log('right')\n    }\n\n    if (swipeDirection === direction.LEFT) {\n      // handle left swipe\n      console.log('left')\n    }\n\n    // let list = selectedCategory\n    // list.pop()\n    // console.log(list);\n    // setSelectedCategory(list);\n\n    let index = cardIndex + 1;\n    setCardIndex(index);\n  }\n\n  return (\n    <div style={{display: 'flex', flex: 1}}>\n        <div className=\"background\">\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                <Text size={40} bold color={'pink'}>\n                    Knowledgesmith\n                </Text>\n            </div> \n            <Swipeable onSwipe={handleOnSwipe}>\n                {/* selectedCategory.map((item, index)=>{\n                    return(\n                        <div className=\"card\">\n                            {item.title}\n                        </div>\n                    )\n                }) */}\n                <div className=\"card\">\n                    {selectedCategory[cardIndex] !== undefined && selectedCategory[cardIndex].title}\n                </div>\n            </Swipeable>\n\n            {/* <CardDeck data={cardData} /> */}\n        </div>\n\n         <div className=\"floating\" style={{justifyContent: 'space-between'}}>\n            <div className=\"styled-btn\"\n            onClick={()=>{}}\n            style={{height: 32, backgroundColor: colors.green}}>\n                <Text size={12} bold color={'pink'}>Pass</Text>\n            </div>\n            <div className=\"styled-btn\"\n            onClick={()=>{}}\n            style={{height: 32, backgroundColor: colors.pink}}>\n                <Text size={12} bold color={'green'}>Flip</Text>\n            </div>\n        </div>\n    </div>\n    );\n};\n\nexport default GameCardPage;\n","import './App.css';\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { LandingPage, GameCardPage} from './page';\nimport React from 'react';\n\nimport './App.css';\n\nfunction App({history}) {\n  return (\n    <div className=\"App\">\n      {/* <Router basename={process.env.PUBLIC_URL}> */}\n      <Router>\n        <Switch>\n          <Route exact path='/' component={LandingPage} />\n          {/* <Route exact path='/tutorial' component={TutorialCardPage} /> */}\n          <Route exact path='/game/:language' \n            component={({ match }) => (\n              <GameCardPage history={history} language={match.params.language} />\n            )} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}